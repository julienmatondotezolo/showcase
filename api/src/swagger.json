{
  "swagger": "2.0",
  "info": {
    "description": "This is the developer documentation for the backend server showcase. ",
    "version": "1.0.0",
    "title": "Showcase API documentation",
    "contact": {
      "email": "julien.matondo-tezolo@student.ehb.be"
    }
  },
  "tags": [
    {
      "name": "Login",
      "description": "login on user account"
    },
    {
      "name": "Logout",
      "description": "login on user account"
    },
    {
      "name": "Register",
      "description": "login on user account"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/final-work/{projectid}": {
      "put": {
        "tags": ["Projects"],
        "summary": "Updated finalwork",
        "description": "Update a finalwork with projectid.",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "projectid",
            "in": "path",
            "description": "finalwork that needs to be modifiied",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Projects"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/final-work/delete/{projectid}": {
      "delete": {
        "tags": ["Projects"],
        "summary": "Deletes a project by id",
        "description": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "projectid",
            "in": "path",
            "description": "deletes project by id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "user not found"
          }
        }
      }
    },
    "/final-work/create": {
      "post": {
        "tags": ["Projects"],
        "summary": "Add a project to the system",
        "description": "",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "project object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Projects"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added to db"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/final-work/get-all": {
      "get": {
        "tags": ["Projects"],
        "summary": "Get all users from the",
        "description": "",
        "operationId": "getUserByName",
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Projects"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/final-work/get-single/{name}": {
      "get": {
        "tags": ["Projects"],
        "summary": "get one finalwork by name",
        "description": "",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name that needs to be updated",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Projects"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/final-work/filter-cluster/{clustername}": {
      "get": {
        "tags": ["Projects"],
        "summary": "filter all finalwork by cluster",
        "description": "",
        "parameters": [
          {
            "name": "clustername",
            "in": "path",
            "description": "filter all projects by clusters",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Projects"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/final-work/get-byid/{id}": {
      "get": {
        "tags": ["Projects"],
        "summary": "get one finalwork by id",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Projects"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/final-work/search-name/{name}": {
      "get": {
        "tags": ["Projects"],
        "summary": "filter all finalwork by name",
        "description": "",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          }
        ],
        "produces": ["application/xml", "application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Projects"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/Register": {
      "post": {
        "tags": ["Register"],
        "summary": "register user into the website",
        "description": "",
        "consumes": ["application/json", "application/xml"],
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "project object that needs to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Registers"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Login"],
        "summary": "Logs user into the system",
        "description": "",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "tags": ["Logout"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/add": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the admin.",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/users/delete/{userid}": {
      "delete": {
        "tags": ["user"],
        "summary": "Deletes a user",
        "description": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "userid",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "user id to delete"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "user not found"
          }
        }
      }
    },
    "/users/get-all": {
      "get": {
        "tags": ["user"],
        "summary": "Get all users",
        "description": "",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "404": {
            "description": "Users not found"
          }
        }
      }
    },
    "/users/get-single/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/update/{userid}": {
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/xml", "application/json"],
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Users"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Registers": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "password2": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Registers"
      }
    },
    "votes": {
      "type": "object",
      "properties": {
        "projectid": {
          "type": "integer"
        },
        "userid": {
          "type": "integer"
        }
      },
      "xml": {
        "name": "votes"
      }
    },
    "Users": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Users"
      }
    },
    "Projects": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "userid": {
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "type": "string"
        },
        "images": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Projects"
      }
    }
  },
  "externalDocs": {
    "url": "http://localhost:3000"
  }
}
